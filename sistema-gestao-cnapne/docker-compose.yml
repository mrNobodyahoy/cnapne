
services:
  # 1. Serviço da Aplicação Java
  app:
    build: . # Constrói a imagem a partir do Dockerfile na pasta atual
    container_name: cnapne_app
    ports:
      - "8080:8080" # Mapeia a porta da sua máquina para a do contêiner
    env_file:
      - .env # Carrega as variáveis do arquivo .env
    environment:
      # Passa as variáveis para a aplicação Spring Boot
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_MAIL_HOST: mailhog # Aponta para o serviço de e-mail
      SPRING_MAIL_PORT: 1025
    depends_on:
      db:
        condition: service_healthy # Só inicia o app depois que o banco estiver saudável
    networks:
      - cnapne_network

  # 2. Serviço do Banco de Dados PostgreSQL
  db:
    image: postgres:15
    container_name: cnapne_db
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      # Comando que verifica se o banco está pronto para aceitar conexões
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cnapne_network

  # 3. Serviço do pgAdmin (Interface Gráfica para o Banco)
  pgadmin:
    image: dpage/pgadmin4
    container_name: cnapne_pgadmin
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - cnapne_network

  # 4. Serviço do MailHog (Servidor de E-mail para Testes)
  mailhog:
    image: mailhog/mailhog
    container_name: cnapne_mailhog
    ports:
      - "1025:1025" # Porta SMTP para a aplicação se conectar
      - "8025:8025" # Porta para acessar a interface web do MailHog
    networks:
      - cnapne_network

# Define os volumes para persistência de dados
volumes:
  postgres_data:

# Define a rede customizada para os serviços se comunicarem
networks:
  cnapne_network:
    driver: bridge